[
    {
        "course_id": "CICS 109",
        "name": "Introduction to Data Analysis in R",
        "description": null,
        "credits": 1.0,
        "prerequisites": [],
        "instructors": "Jasper McChesney"
    },
    {
        "course_id": "CICS 110",
        "name": "Foundations of Programming",
        "description": "An introduction to computer programming and problem solving using computers. This course teaches you how real-world problems can be solved computationally using programming constructs and data abstractions of a modern programming language. Concepts and techniques covered include variables, expressions, data types, objects, branching, iteration, functions, classes, and methods. We will also cover how to translate problems into a sequence of instructions, investigate the fundamental operation of a computational system and trace program execution and memory, and learn how to test and debug programs. No previous programming experience required. (Gen. Ed. R2)",
        "credits": 4.0,
        "prerequisites": [],
        "instructors": ", Aadam Anish Lokhandwala, , Cole Reilly, ,"
    },
    {
        "course_id": "CICS 127",
        "name": "Introduction to Public Interest Technology",
        "description": "Today's world is complex and tech driven. How do we use the tools of information technology to solve problems in a socially responsible way, i.e., in a way that both empowers us and promotes the well-being of the communities in which we live? In this course, we describe the socio-technical world and pragmatic strategies for promoting personal and social responsibility. We explore the questions: What is the public interest in a socio-technical world? What strategies can we use to promote social responsibility in the public sector, private sector, and general public? What can each of us do to make the world a better place? This course is for everyone at all levels and with all interests. No programming or prerequisites are required. We focus on building skills to think analytically, broadly, and strategically, as well as to communicate effectively about complex problems with societal impact. Assignments will provide students multiple paths to success. Counts towards the IT minor and is required for the PIT Undergraduate Certificate. (Gen. Ed. SI)",
        "credits": 4.0,
        "prerequisites": [],
        "instructors": "Francine Berman"
    },
    {
        "course_id": "CICS 160",
        "name": "Object-Oriented Programming",
        "description": "This course will expose students to programming practices beyond the introductory level, concentrating on Object Oriented Programming techniques and an introduction to Data Structures. Students will also study and analyze the complexity of both the algorithms presented in class and of the algorithms they develop. This course also provides experience with the development and analysis of recursive algorithms and programs. Before taking this course, students are expected to have been exposed to the following concepts through a college-level course or equivalent in some high level computer programming language: input and output operations, conditional statements, loops, arrays, recursion, and functions/methods. The course places an emphasis on the careful design and testing of programs. (Gen. Ed. R2)",
        "credits": 4.0,
        "prerequisites": [],
        "instructors": "Jaime Davila, Cole Reilly"
    },
    {
        "course_id": "CICS 210",
        "name": "Data Structures",
        "description": "An introduction to the design, analysis, and implementation of data structures. This course teaches you how to build, test, debug, document, and evaluate objects that encapsulate data and their associated operations using programming constructs and data abstractions of a modern programming language. Concepts and techniques covered include linear and non-linear structures, recursive structures and algorithms, traversal algorithms, binary search trees, balanced trees, priority queues, union-find, hash tables, bloom filters, and graphs. We will also informally compare and contrast the run time efficiency of algorithms and their performance characteristics including the concept of worst-case running time analysis and the classification of algorithms in terms of constant, logarithmic, linear, log linear, quadratic, and exponential time using Big-O notation. (Gen. Ed. R2)",
        "credits": 4.0,
        "prerequisites": [],
        "instructors": "Mordecai Golin, Timothy Richards"
    },
    {
        "course_id": "CICS 256",
        "name": "Make: A Hands-on Introduction to Physical Computing",
        "description": "Inspired by the Maker movement, this course provides a hands-on introduction to physical computing: sensing and responding to the physical world using computers. Specific topics include: basic electronics and circuit design, microcontroller programming using Arduinos, sensing and responding to the physical world, rapid prototyping (3D printing and laser cutting etc.), soft circuits and wearable electronics. The course will encourage and empower students to invent, design, and build practical hardware projects that interact with the physical world. This course has a required lab section, and counts as one of the CS Lab Science Requirement courses for the BS-CS.",
        "credits": 4.0,
        "prerequisites": [],
        "instructors": "Stefan Krastanov"
    },
    {
        "course_id": "CICS 305",
        "name": "Social Issues in Computing",
        "description": "Through a careful analysis and discussion of a range of computing issues, topics, and polices, we will explore various impacts of computers on modern society. This class satisfies the Junior Year Writing requirement by providing directed practice and specific instruction in a range of writing genres. Students will produce approximately 20-25 pages of polished written work over the course of the semester. CICS Primary Majors only.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Erin Butler, Elizabeth Gunther, Siobhan Meï, Justin Obara, Matthew Ross, STAFF, Christina Sutcliffe"
    },
    {
        "course_id": "COMPSCI 119",
        "name": "Introduction to Programming",
        "description": "A complete introduction to computer programming using the Python language. Topics include coverage of all the supported data types and program code structures, functions (up through lambda expressions and recursion), reasoning about and debugging existing code, implementation of custom libraries, selection of data structures, and the fundamentals of object-oriented programming. Students will create, debug, and run Python 3 programs that explore each of these topics in turn, from simple loops up through the processing of large data sets, and eventually to the creation of professional-quality libraries to synthesize graphics images and audio files. No prior programming experience expected. Not open to Computer Science majors.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": null,
        "comments": []
    },
    {
        "course_id": "COMPSCI 220",
        "name": "Programming Methodology",
        "description": "Development of individual skills necessary for designing, implementing, testing and modifying larger programs, including: design strategies and patterns, using functional and object-oriented approaches, testing and program verification, code refactoring, interfacing with libraries. There will be significant programming and mid-term and final examinations.",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 187"
        ],
        "instructors": "Marius Minea",
        "comments": []
    },
    {
        "course_id": "COMPSCI 230",
        "name": "Computer Systems Principles",
        "description": "Large-scale software systems like Google - deployed over a world-wide network of hundreds of thousands of computers - have become a part of our lives. These are systems success stories - they are reliable, available (\"up\" nearly all the time), handle an unbelievable amount of load from users around the world, yet provide virtually instantaneous results. On the other hand, many computer systems don't perform nearly as well as Google - hence the now-clich \"the system is down.\" In this class, we study the scientific principles behind the construction of high-performance, scalable systems. The course begins with a discussion of C data representation, and moves up the stack from there to the features of modern architectures, assembly languages, and operating system services such as I/O, process, and synchronization. This class assumes students have either taken COMPSCI 198C or have equivalent experience in the C programming language.",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 187"
        ],
        "instructors": "Phuthipong Bovornkeeratiroj, Meng-Chieh Chiu",
        "comments": []
    },
    {
        "course_id": "COMPSCI 240",
        "name": "Reasoning Under Uncertainty",
        "description": "Development of mathematical reasoning skills for problems that involve uncertainty. Each concept will be illustrated by real-world examples and demonstrated through in-class and homework exercises. Counting and probability -- basic counting problems, probability definitions, mean, variance, binomial distribution, discrete random variables, continuous random variables, Markov and Chebyshev bounds, Laws of large numbers, and central limit theorem. Probabilistic reasoning -- conditional probability and odds, Bayes' Law, Markov Chains, Bayesian Networks. Statistical topics such as estimation of parameters and linear regression, as time permits.",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 187",
            "MATH 132"
        ],
        "instructors": "Mark Wilson",
        "comments": []
    },
    {
        "course_id": "COMPSCI 250",
        "name": "Introduction to Computation",
        "description": "Basic concepts of discrete mathematics useful to computer science: set theory, strings and formal languages, propositional and predicate calculus, relations and functions, basic number theory. Induction and recursion: interplay of inductive definition, inductive proof, and recursive algorithms. Graphs, trees, and search. Finite-state machines, regular languages, nondeterministic finite automata, Kleene's Theorem. Problem sets, 2 midterm exams, timed final.",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 187",
            "ENG 241",
            "MATH 132"
        ],
        "instructors": "David Barrington, Mordecai Golin",
        "comments": []
    },
    {
        "course_id": "COMPSCI 311",
        "name": "Introduction to Algorithms",
        "description": "This course will introduce you to a variety of techniques to design algorithms, such as divide and conquer, greedy, dynamic programming, and network flow. You will learn to study the performance of various algorithms within a formal, mathematical framework. You will also learn how to design very efficient algorithms for many kinds of problems and recognize problems that currently do not have efficient algorithms. Assignments may include programming: you should be able to program in Java, C, or some other closely related language. Mathematical experience (as provided by COMPSCI 250) is required. This course is required for the CS Major (BS) and counts as a CS Elective for the CS Major (BA).",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 187",
            "COMPSCI 250",
            "MATH 455"
        ],
        "instructors": "Marius Minea, Daniel Sheldon",
        "comments": []
    },
    {
        "course_id": "COMPSCI 320",
        "name": "Introduction to Software Engineering",
        "description": "In this course, students learn and gain practical experience with software engineering principles and techniques. The practical experience centers on a semester-long team project in which a software development project is carried through all the stages of the software life cycle. Topics in this course include requirements analysis, specification, design, abstraction, programming style, testing, maintenance, communication, teamwork, and software project management. Particular emphasis is placed on communication and negotiation skills and on designing and developing maintainable software. Use of computer required. Several written assignments, in-class presentations, and a term project. This course satisfies the IE Requirement and counts as a CS Elective for the CS Major.",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 220"
        ],
        "instructors": "Gordon Anderson, Jaime Davila, Matthew Rattigan",
        "comments": []
    },
    {
        "course_id": "COMPSCI 326",
        "name": "Web Programming",
        "description": "The web is arguably today's most important application platform. Web browsers run on practically every device, and even many phone applications are in fact web applications under the covers. This course will cover a broad range of client-side web technologies, including HTTP itself, HTML5, CSS, and JavaScript; it will additionally cover key concepts for the server side of web applications, including key value stores and SQL servers. This course will also cover key concepts and technologies including AJAX, JavaScript libraries (e.g., jQuery), and web security. This course is hands-on and heavily project-based; students will construct a substantial dynamic web application based on the concepts, technologies, and techniques presented during lectures and in readings. This course satisfies the IE Requirement and an Elective for both the CS and INFORM Majors. Note: as the name web programming denotes, programming is a key component of this class. Previous background in JavaScript is strongly recommended.",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 220",
            "INFO 248",
            "COMPSCI 186"
        ],
        "instructors": "Meng-Chieh Chiu",
        "comments": []
    },
    {
        "course_id": "COMPSCI 328",
        "name": "Mobile Health Sensing and Analytics",
        "description": "The typical smartphone comes equipped with a plethora of sensors for monitoring activity, speech patterns, social interactions, and location. In addition, mobile accessories such as wearable wristbands now enable routine and continuous monitoring of a host of physiological signals (e.g., heart rate, respiratory rate, oxygen saturation, and others.). In conjunction, these sensors can enable higher-order inferences about more complex human activities/behavioral states (e.g., activity patterns, stress, sleep, social interactions, etc.). Such ubiquitous sensing in daily life, referred to as mobile health sensing, promises to revolutionize our understanding of human activities and health conditions. This course is a hands-on introduction to personal health sensing through mobile phones. Please note that this is a *programming-heavy* class so a solid programming background is required. All programming assignments are in Python, so programming experience with *Python* is recommended. This course counts as an Elective for the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 187",
            "INFO 248",
            "COMPSCI 186"
        ],
        "instructors": "Phuc Nguyen",
        "comments": []
    },
    {
        "course_id": "COMPSCI 345",
        "name": "Practice and Applications of Data Management",
        "description": "Computing has become data-driven, and databases are now at the heart of commercial applications. The purpose of this course is to provide a comprehensive introduction to the use of data management systems within the context of various applications. The emphasis is on relational databases, though non-relational databases are also introduced. Some of the covered topics include the relational data model, data retrieval, application-driven database design, schema refinement, implementation of basic transactions, database security. This course counts as a CS Elective for the CS Major. Students who have completed COMPSCI 445 are not eligible to take this course without instructor permission.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 187",
            "INFO 248",
            "COMPSCI 186"
        ],
        "instructors": "Gordon Anderson",
        "comments": []
    },
    {
        "course_id": "COMPSCI 348",
        "name": "Principles of Data Science",
        "description": "Data science uses various concepts, practices, algorithms, and systems to extract knowledge and insights from data. It encompasses techniques from machine learning, statistics, databases, visualization, and several other fields. When properly integrated, these techniques can help human analysts make sense of vast stores of digital information. This course presents the fundamental principles of data science, familiarizes students with the technical details of representative algorithms, and connects these concepts to applications in industry, science, and government, including fraud detection, marketing, scientific discovery, and web mining. The course assumes that students are familiar with basic concepts and algorithms from probability and statistics. This course counts as a CS Elective toward the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 187",
            "COMPSCI 240",
            "COMPSCI 250",
            "MATH 455"
        ],
        "instructors": "David Jensen",
        "comments": []
    },
    {
        "course_id": "COMPSCI 360",
        "name": "Introduction to Computer and Network Security",
        "description": "This course provides an introduction to the principles and practice of computer and network security. A focus on both fundamentals and practical information will be stressed. The three key topics of this course are cryptography, privacy, and network security. Subtopics include ciphers, hashes, key exchange, security services (integrity, availability, confidentiality, etc.), security attacks, vulnerabilities, anonymous communications, and countermeasures. This course counts as a CS Elective for the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 230"
        ],
        "instructors": "Eugene Bagdasarian",
        "comments": []
    },
    {
        "course_id": "COMPSCI 367",
        "name": "Reverse Engineering and Understanding Exploit Development",
        "description": "Many software developers aren't aware of how to properly write secure code. This course covers practical skills in reverse engineering and binary exploitation, and examines the techniques used by hackers in recent major security incidents. The course objective is to provide students with a strong understanding of attack patterns, and to ensure students implement more secure coding practices in their own code. This course begins with an introduction to Intel-based assembly, reverse engineering, vulnerability analysis, and various forms of Linux-focused binary exploitation. The course then covers stack, heap and Linux kernel-based exploitation, and dive into common defensive mitigations such as ASLR, NX and Stack Cookies alongside techniques to bypass each of them. This course is focused on low-level software written in C. COMPSCI 230 is sufficient for demonstrating knowledge of C and that the student has been introduced to assembly. Students who have taken 198C (or can demonstrate a proficiency in C) and can demonstrate a familiarity with assembly can request an override from the instructor. This course counts as a CS Elective for the CS Major, but does not count as an INFORM Elective.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Lurene Grenier",
        "comments": []
    },
    {
        "course_id": "COMPSCI 370",
        "name": "Introduction to Computer Vision",
        "description": "This introductory computer vision class will address fundamental questions about getting computers to \"see\" like humans. We investigate questions such as -What is the role of vision in intelligence? -How are images represented in a computer? -How can we write algorithms to recognize an object? -How can humans and computers \"learn to see better\" from experience? We will write a number of basic computer programs to do things like recognize handwritten characters, track objects in video, and understand the structure of images. This course counts as a CS Elective for the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 240",
            "COMPSCI 383"
        ],
        "instructors": "Subhransu Maji",
        "comments": []
    },
    {
        "course_id": "COMPSCI 373",
        "name": "Introduction to Computer Graphics",
        "description": "This course introduces the fundamental concepts of 2D and 3D computer graphics. It covers the basic methods for modeling, rendering, and imaging. Topics include: image processing, 2D/3D modeling, 3D graphics pipeline, WebGL, shading, texture mapping, ray tracing, 3D printing. Throughout the class, we will teach students to learn modern graphics techniques, to model the visual world algorithmically, and to implement algorithms using JavaScript. Students who have taken COMPSCI 473 are not eligible to take this course. Students cannot take COMPSCI 497C after taking this course. This course counts as a CS Elective for the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 187",
            "MATH 235",
            "INFO 150",
            "COMPSCI 240"
        ],
        "instructors": "Rui Wang",
        "comments": []
    },
    {
        "course_id": "COMPSCI 377",
        "name": "Operating Systems",
        "description": "In this course we examine the important problems in operating system design and implementation. The operating system provides a well-known, convenient, and efficient interface between user programs and the bare hardware of the computer on which they run. The operating system is responsible for allowing resources (e.g., disks, networks, and processors) to be shared, providing common services needed by many different programs (e.g., file service, the ability to start or stop processes, and access to the printer), and protecting individual programs from one another. The course will start with a brief historical perspective of the evolution of operating systems over the last fifty years, and then cover the major components of most operating systems. This discussion will cover the tradeoffs that can be made between performance and functionality during the design and implementation of an operating system. Particular emphasis will be given to three major OS subsystems: process management (processes, threads, CPU scheduling, synchronization, and deadlock), memory management (segmentation, paging, swapping), file systems, and operating system support for distributed systems. Programming projects in C. This course counts as a CS Elective for the CS Major.",
        "credits": 4.0,
        "prerequisites": [
            "COMPSCI 230"
        ],
        "instructors": "Phuthipong Bovornkeeratiroj",
        "comments": []
    },
    {
        "course_id": "COMPSCI 383",
        "name": "Artificial Intelligence",
        "description": "This course aims to give students a high level understanding of the prominent AI topics that are being employed in industry today. It will provide an introduction to each topic, an overview of its supporting algorithms, and examples of products powered by the technology. Particular emphasis will be had on Machine Learning and developing hands-on practical skills with this technology. Upon completion of this course, students will obtain a wider scope of understanding about modern AI trends in software technology and develop an intuition for how this software works. To succeedin this course, students will need a fundamental understanding of data structures and programming fundamentals. Graph and tree data structures will be used in particular. Programming assignments in this class will be done using Python. Experience in at least one programming language is required and it s strongly recommended you have some Python experience before starting. A mathematical foundation in statistics and linear algebra is not strictly necessary but will deepen understanding of course material. This course counts as an Elective for CS and INFORM Majors.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 220",
            "COMPSCI 240",
            "STATISTC 515"
        ],
        "instructors": "William McNichols",
        "comments": []
    },
    {
        "course_id": "COMPSCI 389",
        "name": "Introduction to Machine Learning",
        "description": "The course provides an introduction to machine learning algorithms and applications, and is intended for students with no prior experience with machine learning. Students with prior experience in machine learning or who are already passionate about the subject are encouraged to take COMPSCI 589 instead. Machine learning algorithms answer the question: \"How can a computer improve its performance based on data and from its own experience?\" The course is roughly divided into thirds: supervised learning (learning from labeled data), reinforcement learning (learning via trial and error), and real-world considerations like ethics, safety, and fairness. Specific topics include linear and non-linear regression, (stochastic) gradient descent, neural networks, backpropagation, classification, Markov decision processes, state-value and action-value functions, temporal difference learning, actor-critic algorithms, the reward prediction error hypothesis for dopamine, connectionism for philosophy of mind, and ethics, safety, and fairness considerations when applying machine learning to real-world problems. This course counts as an Elective for the CS and INFORM Majors.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 220",
            "COMPSCI 240",
            "STATISTC 515",
            "MATH 233"
        ],
        "instructors": "Philip Thomas",
        "comments": []
    },
    {
        "course_id": "COMPSCI 403",
        "name": "Introduction to Robotics: Perception, Mechanics, Dynamics, and Control",
        "description": "This course covers the concepts and methods needed to understand how to move robots and make them interact with the physical world. We will study theoretical backgrounds and techniques to describe the configuration and state of a robot and to control its motion. The topics that will be covered in the lectures include the representation of three-dimensional movement, mechanisms (kinematics and dynamics), actuators, and dynamics-based feedback control. Students will also learn to use Google Colab and Python programming to build simulation and analysis tools. This course counts as a CS Elective for the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "MATH 235",
            "COMPSCI 220"
        ],
        "instructors": "Donghyun Kim",
        "comments": []
    },
    {
        "course_id": "COMPSCI 420",
        "name": "Software Entrepreneurship",
        "description": "This course is geared towards students interested in developing software that moves from early stage proof-of-concept ideas towards marketable products with societal benefit. The course leverages the expertise of the Entrepreneurs in Residence (EIR) of the Ventures @ CICS initiative at CICS. The course is grounded in Challenge Based Learning (CBL), an active, student-directed instructional framework that was developed by Apple Inc. and educators. This course counts as a Elective for the CS and INFORM Majors.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 320"
        ],
        "instructors": "Matthew Rattigan",
        "comments": []
    },
    {
        "course_id": "COMPSCI 426",
        "name": "Scalable Web Systems",
        "description": "The web has become a large and complex area for application development. Access to an abundance of open source languages, libraries, and frameworks has led to the quick and easy construction of a variety of applications with several moving parts working in coordination to present to the user the illusion of a single program. In reality, web applications are extremely difficult to get right. They involve a large collection of coordinated services, multiple databases, complicated user interfaces, security and performance issues, and ever changing 3rd party services, spread across physical and virtual machines. These complications are further stressed by the large number of concurrent users that access these applications every second. This course will investigate several well known web-based applications and the technology and software architecture used to scale these applications. We will also study a specific topic related to scalability in software design in the context of web application architecture. This course counts as an Elective for the CS and INFORM Majors.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Timothy Richards",
        "comments": []
    },
    {
        "course_id": "COMPSCI 429",
        "name": "Software Engineering Project Management",
        "description": "The purpose of this course is to provide students with practical experience in the management of software development projects. Students in this course will gain this experience by serving as software development team technical managers for teams of software engineering students in COMPSCI 320. As project managers, the students in COMPSCI 429 will be responsible for: supervising and managing the work of teams of COMPSCI 320 students; interfacing with the other COMPSCI 429 students managing other teams in the course; interfacing with the course instructor, course TA, and course customer. COMPSCI 429 students will be assigned readings in software engineering project management to provide a theoretical basis for their work in this course. But the majority of work in the course will be related to the actual management of assigned development teams. As team managers, COMPSCI 429 students will set goals and schedules for their teams, track and report team progress, negotiate with leaders of other teams and the course customer, and evaluate the work of members of their teams. COMPSCI 429 course assignments may include: written team goals, plans and schedules; periodic reports on team progress; documentation of agreements reached with other team leaders and customers; evaluations of the applicability of theoretical papers to the work of this course. This course will meet at the same times and places as COMPSCI 320. Additional meetings with team members and other students in COMPSCI 429 are also expected to be arranged by mutual agreement. An additional one hour weekly meeting of all of the students in COMPSCI 429 is required. This course counts as a CS Elective for the CS Major. Enrollment in this course is only by permission of the instructor, and is restricted to students who have previously taken COMPSCI 320, and received a grade of B or better.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 320"
        ],
        "instructors": "Gordon Anderson, Jaime Davila, Matthew Rattigan",
        "comments": []
    },
    {
        "course_id": "COMPSCI 445",
        "name": "Information Systems",
        "description": "This course is an introduction to the efficient management of large-scale data. The course includes principles for representing information as structured data, query languages for analyzing and manipulating structured data, and core systems principles that enable efficient computation on large data sets. Classical relational database topics will be covered (data modeling, SQL, query optimization, concurrency control), as well as semi-structured data (XML, JSON), and distributed data processing paradigms (e.g. MapReduce and Spark). Additional application topics may include web application development, data integration, processing data streams, database security and privacy. This course counts as an Elective toward the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 220"
        ],
        "instructors": "Trek Palmer",
        "comments": []
    },
    {
        "course_id": "COMPSCI 446",
        "name": "Search Engines",
        "description": "This course provides an overview of the important issues in information retrieval, and how those issues affect the design and implementation of search engines. The course emphasizes the technology used in Web search engines, and the information retrieval theories and concepts that underlie all search applications. Mathematical experience (as provided by COMPSCI 240) is required. You should also be able to program in Java or Python (other closely related languages may be acceptable). This course counts as a CS Elective for the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 240",
            "COMPSCI 383"
        ],
        "instructors": "Razieh Rahimi",
        "comments": []
    },
    {
        "course_id": "COMPSCI 453",
        "name": "Computer Networks",
        "description": "This course provides an introduction to fundamental concepts in the design and implementation of computer networks, their protocols, and applications with a particular emphasis on the Internet's TCP/IP protocol suite. Topics to be covered include: overview of network architectures, applications, network programming interfaces (e.g., sockets), transport, congestion, routing, and data link protocols, addressing, local area networks, wireless networks, network security, and network management. There will be five or six homeworks, two programming projects, several hands-on labs (that require an Internet-connected personal computer) and two exams. This course counts as a CS Elective for the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 230",
            "COMPSCI 377"
        ],
        "instructors": "Arun Venkataramani",
        "comments": []
    },
    {
        "course_id": "COMPSCI 466",
        "name": "Applied Cryptography",
        "description": "This is an undergraduate-level introduction to cryptography. It is a theory course with a significant mathematical component. However, our viewpoint will be theory applied to practice in that we will aim to treat topics in a way of applied value. We will discuss cryptographic algorithms used in practice and how to reason about their security. More fundamentally, we will try to understand what security is in a rigorous way that allows us to follow sound principles and uncover design weaknesses. The primary topics are: blockciphers, pseudorandom functions, symmetric-key encryption schemes, hash functions, message authentication codes, public-key encryption schemes, digital signature schemes, and public-key infrastructures. This course counts as a CS Elective toward the CS Major.",
        "credits": 3.0,
        "prerequisites": [
            "COMPSCI 311"
        ],
        "instructors": "Adam O'Neill",
        "comments": []
    },
    {
        "course_id": "COMPSCI 501",
        "name": "Formal Language Theory",
        "description": "Introduction to formal language theory. Topics include finite state languages, context-free languages, the relationship between language classes and formal machine models, the Turing Machine model of computation, theories of computability, resource-bounded models, and NP-completeness. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "David Barrington",
        "comments": []
    },
    {
        "course_id": "COMPSCI 508",
        "name": "Ethical Considerations in Computing",
        "description": "This course considers an array of ethical issues in computing. Readings and class discussions will cover ethical questions related to artificial intelligence, privacy online, identity in computing, electronic surveillance, environmental responsibility, internet censorship, network policy, algorithmic systems, information access, ownership of intellectual property in computing contexts and others. All examples will be drawn from current and recent events with readings from a range of sources both journalistic and academic. Course assignments will have real world applications and offer students opportunities for developing their speaking and writing skills. Class discussions will be a vibrant component of the course. This course counts as an Elective for the CS and INFORM Majors. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Michelle Trim",
        "comments": []
    },
    {
        "course_id": "COMPSCI 514",
        "name": "Algorithms for Data Science",
        "description": "With the advent of social networks, ubiquitous sensors, and large-scale computational science, data scientists must deal with data that is massive in size, arrives at blinding speeds, and often must be processed within interactive or quasi-interactive time frames. This course studies the mathematical foundations of big data processing, developing algorithms and learning how to analyze them. We explore methods for sampling, sketching, and distributed processing of large scale databases, graphs, and data streams for purposes of scalable statistical description, querying, pattern mining, and learning. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": null,
        "prerequisites": [],
        "instructors": "Andrew McGregor",
        "comments": []
    },
    {
        "course_id": "COMPSCI 520",
        "name": "Theory and Practice of Software Engineering",
        "description": "Introduces students to the principal activities and state-of-the-art techniques involved in developing high-quality software systems. Topics include: requirements engineering, formal specification methods, design principles & patterns, verification & validation, debugging, and automated software engineering. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Heather Conboy",
        "comments": []
    },
    {
        "course_id": "COMPSCI 532",
        "name": "Systems for Data Science",
        "description": "In this course, students will learn the fundamentals behind large-scale systems in the context of data science. We will cover the issues involved in scaling up (to many processors) and out (to many nodes) parallelism in order to perform fast analyses on large datasets. These include locality and data representation, concurrency, distributed databases and systems, performance analysis and understanding. We will explore the details of existing and emerging data science platforms, including MapReduce-Hadoop, Spark, and more. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Peter Klemperer",
        "comments": []
    },
    {
        "course_id": "COMPSCI 535",
        "name": "Computer Architecture",
        "description": "The structure of digital computers is studied at several levels, from the basic logic level, to the component level, to the system level. Topics include: the design of basic components such as arithmetic units and registers from logic gates; the organization of basic subsystems such as the memory and I/O subsystems; the interplay between hardware and software in a computer system; the von Neumann architecture and its performance enhancements such as cache memory, instruction and data pipelines, coprocessors, and parallelism. Semester team project to design an architecture and develop a software simulation of it. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Charles Weems",
        "comments": []
    },
    {
        "course_id": "COMPSCI 546",
        "name": "Applied Information Retrieval",
        "description": "COMPSCI 546 is a graduate level course intended to cover information retrieval and other information processing activities, from an applied perspective. There will be numerous programming projects and assignments. It provides a richer technical follow on to COMPSCI 446 (Search Engines) for undergraduates interested in a deeper understanding of the technologies. It also provides a strong basis for continuing on with COMPSCI 646 (Information Retrieval) for those graduate students who are interested in a more complete theoretical coverage of the area. Topics will include: search engine construction (document acquisition, processing, indexing, and querying); learning to rank; information retrieval system performance evaluation; classification and clustering; other machine learning information processing tasks (e.g. basic deep learning models for information retrieval); and many more. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Hamed Zamani"
    },
    {
        "course_id": "COMPSCI 561",
        "name": "System Defense and Test",
        "description": "This class trains students to detect and analyze weaknesses and vulnerabilities in target systems as a method of assessing the security of a system. We focus on tools and techniques that an attacker would employ but from the perspective of an ethical system administrator. Topics include tools and techniques for penetration testing and attacks, information gathering, social engineering, and defenses. Specific topics include malware, denial of service attacks, SQL injection, buffer overflow, session hijacking, and system hacking, network sniffing and scans, wireless encryption weaknesses and other WiFi issues, IDS/firewall evasion, metasploit tools, physical security, and setting up honeypots. Previously INFOSEC 690S. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Parviz Kermani",
        "comments": []
    },
    {
        "course_id": "COMPSCI 564",
        "name": "Cyber Effects: Reverse Engineering, Exploit Analysis, and Capability Development",
        "description": "This course covers a broad range of topics related to cyber security and operations. Our focus is on real world studies of reverse engineering, exploit analysis, and capability development within the context of computer network operations and attack. The course has an emphasis on hands-on exercises and projects. Topics covered include computer architecture and assembly language, principles of embedded security, the essentials of exploit development and analysis (including using industry standard tools such as Ghidra, and utilizing computer security databases such as CVE), and discussion of real-world events and techniques. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Jeffrey Hamalainen, Nick Merlino, Edward Walters, Adam Woodbury",
        "comments": []
    },
    {
        "course_id": "COMPSCI 565",
        "name": "Advanced Digital Forensic Systems",
        "description": "This course introduces students to the principal activities and state-of-the-art techniques involved in developing digital forensics systems. Topics covered may include: advanced file carving and reconstruction, forensic analysis of modern filesystems, network forensics, mobile device forensics, memory forensics, and anti-forensics. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Peter Klemperer",
        "comments": []
    },
    {
        "course_id": "COMPSCI 571",
        "name": "Data Visualization and Exploration",
        "description": "In this course, students will learn the fundamental algorithmic and design principles of visualizing and exploring complex data. The course will cover multiple aspects of data presentation including human perception and design theory; algorithms for exploring patterns in data such as clustering, and dimensionality reduction. A wide range of statistical graphics and information visualization techniques will be covered. We will explore numerical data, relational data, temporal data, spatial data, graphs and text. Hands-on projects will be based on Python or JavaScript with D3. This course counts as an Elective toward the CS and INFORM Majors. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Hamza Mohamed Elhamdadi",
        "comments": []
    },
    {
        "course_id": "COMPSCI 589",
        "name": "Machine Learning",
        "description": "This course will introduce core machine learning models and algorithms for classification, regression, clustering, and dimensionality reduction. On the theory side, the course will focus on effectively using machine learning methods to solve real-world problems with an emphasis on model selection, regularization, and empirical evaluation. The assignments will involve both mathematical problems and implementation tasks. Knowledge of a high-level programming language is absolutely necessary. Python is most commonly used (along with standard libraries such as numpy, scipy, and scikit-learn), but languages such as Matlab, R, Scala, Julia would also be suitable. While this course has an applied focus, it still requires appropriate mathematical background in probability and statistics, calculus, and linear algebra. The prerequisites for undergrads were previously COMPSCI 383 and MATH 235 (COMPSCI 240 provides sufficient background in probability, and MATH 131/132 provide sufficient background in calculus). Graduate students can check the descriptions for these courses to verify that they have sufficient mathematical background for 589. Strong foundations in linear algebra, calculus, probability, and statistics are essential for successfully completing this course. Graduate students from outside computer science with sufficient background are also welcome to take the course. This course counts as a CS Elective for the CS Major. Undergraduate",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Bruno Castro da Silva, STAFF",
        "comments": []
    },
    {
        "course_id": "COMPSCI 603",
        "name": "Robotics",
        "description": "This course is intended to serve as an advanced overview of robotics spanning the complete autonomy loop: perception, planning, and control. We will study the theory, algorithms, and efficient implementations related to these topics, with focus on open discussions for how to do research to go beyond the state of the art. Students will gain hands-on experience in implementing, and extending such algorithms using simulations.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Hao Zhang",
        "comments": []
    },
    {
        "course_id": "COMPSCI 611",
        "name": "Advanced Algorithms",
        "description": "Principles underlying the design and analysis of efficient algorithms. Topics to be covered include: divide-and-conquer algorithms, graph algorithms, matroids and greedy algorithms, randomized algorithms, NP-completeness, approximation algorithms, linear programming. Open to graduate Computer Science students only.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Hedyeh Beyhaghi",
        "comments": []
    },
    {
        "course_id": "COMPSCI 627",
        "name": "Fixing Social Media",
        "description": "Over the past decade, user-generated participatory media social media has emerged as the dominant model for content of the Internet. From Facebook to Twitter, YouTube to Wikipedia, content created by non-professionals and circulated for commercial and non-commercial motives underpins seven of the top 10 websites in the US, and has become an increasingly important component of the news ecosystem. While social media was initially hailed as a powerful tool for broadening civic participation, many problems have emerged with the rise of the medium, from questions of whether social media usage is bad for our individual mental health, to whether the fabric of our democracy is being damaged by disinformation, fragmentation and hyperpolarization. As legislators look to regulate these platforms and commentators propose shutting them down entirely, this course looks for an alternative: affirmative visions of social media that are good for individuals and society, which we could work towards building. This class examines possible problems with existing modes of social media, discusses ways in which social media could be a benefit to individuals and societies, develops case studies of successful and healthy online communities, and ultimately designs and builds tools to improve existing social media systems or replace them with novel models. Students will write reflectively about weekly readings and discussions and participate in multi-week projects, ultimately building teams to work on final projects. Meets with COMM 627 and SPP 627.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Ethan Zuckerman",
        "comments": []
    },
    {
        "course_id": "COMPSCI 645",
        "name": "Database Design and Implementation",
        "description": "This course covers the design and implementation of traditional relational database systems as well as advanced data management systems. The course will treat fundamental principles of databases such as the relational model, conceptual design, and schema refinement. We will also cover core database implementation issues including storage and indexing, query processing and optimization, and transaction management. Additionally, we will address challenges in modern information systems, including scalability and parallelization, big data systems, cloud databases, dealing with graph and vector data, and the integration of database management systems and machine learning.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Marco Serafini",
        "comments": []
    },
    {
        "course_id": "COMPSCI 651",
        "name": "Optimization in Computer Science",
        "description": "Much recent work in computer science in a variety of areas, from game theory to machine learning and sensor networks, exploits sophisticated methods of optimization. This course is intended to give students an in-depth background in both the foundations as well as some recent trends in the theory and practice of optimization for computer science. The Optimization course covers these topics, which are critical to a large number of research projects conducted within the department.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Madalina Fiterau Brostean",
        "comments": []
    },
    {
        "course_id": "COMPSCI 677",
        "name": "Distributed and Operating Systems",
        "description": "This course provides an in-depth examination of the principles of distributed systems and advanced concepts in operating systems. Covered topics include client-server programming, distributed scheduling, virtualization, cloud computing, distributed storage, security in distributed systems, distributed middleware, ubiquitous computing, and applications such as the Internet of Things, Web and peer-to-peer systems.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Prashant Shenoy",
        "comments": []
    },
    {
        "course_id": "COMPSCI 683",
        "name": "Artificial Intelligence",
        "description": "In-depth introduction to Artificial Intelligence focusing on techniques that allow intelligent systems to reason effectively with uncertain information and cope limited computational resources. Topics include: problem-solving using search, heuristic search techniques, constraint satisfaction, local search, abstraction and hierarchical search, resource-bounded search techniques, principles of knowledge representation and reasoning, logical inference, reasoning under uncertainty, belief networks, decision theoretic reasoning, representing and reasoning about preferences, planning under uncertainty using Markov decision processes, multi-agent systems, and computational models of bounded rationality.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Yair Zick",
        "comments": []
    },
    {
        "course_id": "COMPSCI 685",
        "name": "Advanced Natural Language Processing",
        "description": "This course will broadly deal with deep learning methods for natural language processing, with a specific focus on large language models. Most of the semester will focus on neural language models. It is intended for graduate students in computer science and linguistics who are (1) interested in learning about cutting-edge research progress in NLP and (2) familiar with machine learning fundamentals. We will cover modeling architectures, training objectives, and downstream tasks (e.g., text classification, question answering, and text generation). Coursework includes programming assignments and a final project.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Haw-Shiuan Chang",
        "comments": []
    },
    {
        "course_id": "COMPSCI 701",
        "name": "Advanced Topics in Computer Science",
        "description": "Advanced Topics in Computer Science Master's Project: Advanced research project in Computer Science.",
        "credits": null,
        "prerequisites": [],
        "instructors": null,
        "comments": []
    },
    {
        "course_id": "COMPSCI 879",
        "name": "Teaching Assistants as Tomorrow's Faculty",
        "description": "Teaching Assistants as Tomorrow's Faculty prepares Teaching Assistants (TAs) at the College of Information and Computer Sciences to fulfill their duties in an effective and pedagogically sound manner. The two credit (not repeatable) course is semester long and taken by all TAs prior to assuming assistantship.",
        "credits": 2.0,
        "prerequisites": [],
        "instructors": "Ivon Arroyo"
    },
    {
        "course_id": "INFO 150",
        "name": "A Mathematical Foundation for Informatics",
        "description": "Mathematical techniques useful in the study of computing and information processing. The mathematical method of definition and proof. Sets, functions, and relations. Combinatorics, probability and probabilistic reasoning. Graphs and trees as models of data and of computational processes.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": null
    },
    {
        "course_id": "INFO 203",
        "name": "A Networked World",
        "description": "The course will cover the technical foundations of today s communication networks, particularly the Internet. It will also address key social, policy, economic and legal aspects of these networks, their use (and abuse), and their regulation. This course covers computer science topics, but all material will be presented in a way that is accessible to an educated audience with or without a strong technical background. Not intended for Computer Science majors students interested in a CS majors-level treatment of this material should see COMPSCI 453.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Mohammadhassan Hajiesmaili"
    },
    {
        "course_id": "INFO 248",
        "name": "Introduction to Data Science",
        "description": "This course is an introduction to the concepts and skills involved with the collection, management, analysis, and presentation of data sets and the data products that result from the work of data scientists. Privacy, algorithmic bias and ethical issues are also discussed. Students will work with data from the financial, epidemiological, educational, and other domains. The course provides examples of real-world data that students work with using various software tools. This course consists of two lecture meetings and one lab meeting per week. Readings will be assigned as preparation for each class meeting. A semester project will be assigned. Students work in pairs to develop their project over the semester. The project provides students with an opportunity to work collaboratively to explore the topics in more depth in a specialized domain. A midterm and final exam will be given. Grades are determined by a combination of scores on lab activities, projects, and exam scores. Software: all software is freely available. Open to INFORM majors.",
        "credits": 4.0,
        "prerequisites": [],
        "instructors": "Gordon Anderson"
    },
    {
        "course_id": "INFO 348",
        "name": "Data Analytics with Python",
        "description": "The modern world is awash with data, and making sense of it requires specialized skills. This course will expose students to commonly used data analytics techniques. Topics include the acquisition, manipulation, and transformation of structured data, exploratory data analysis, data visualization, and predictive modeling. Students in this course will learn and use the Python programming language and tools for working with data. Analysis will be performed using real data sets. Does not count as a CS Elective (BA or BS). Satisfies one of the Data Science Concentration requirements and counts as an elective for the Health and Life Sciences Concentration for the Informatics major. Open to INFORM majors.",
        "credits": 3.0,
        "prerequisites": [],
        "instructors": "Jayant Taneja"
    }
]